sНеобходимо создать проект на фреймворке Laravel и залить его на github.

Проект: 

Нужна система, которая бы хранила список учеников и их родителей, а так же позволяла по api получить список пользователей, родителей и применить фильтры.

Тех требования - Laravel, MySQL, выложить исходный ход в git-репозиторий.

Требования:

1) Мы должна уметь добавлять ученика по API - присылаем json, он парсится в контроллере, проверяется на ошибки, сохраняется в базе

2) Мы должны уметь получать список учеников (гугли как сделать REST API в laravel)

- POST: [site.ru/](http://site.ru/user)student - добавление ученика
- GET: [site.ru/student](http://site.ru/user/892) - получение всех пользователей
- GET: [site.ru/student/](http://site.ru/user/892)1 - получение ученика по ID

3) То же самое и с родителем:

- POST: [site.ru/](http://site.ru/user)parent - добавление родителя
- GET: [site.ru/parent](http://site.ru/user/892) - получение всех родителей
- GET: [site.ru/parent/892](http://site.ru/user/892) - получение родителя по ID
- POST: [site.ru/parent/892/addStudent/1](http://site.ru/parent/892/addChild/1) - добавить ученика с id=1 к родителю с id=892

У пользователя должны храниться следующие данные:

ID, имя, фамилия, возраст

У родителя:

ID, имя, фамилия, возраст

Эти же данные отдаются при получении родителя/ученика

Вопросы к заданию:

1) Как будешь хранить привязку ученика к родителю?

2) Как ты считаешь - схема с двумя url - оптимальная? Если нет - как бы ты сделала?

Бонусные задачи:

1) Когда мы получаем родителя по ID, пусть у него будет вложенный массив с ID его детей

2) Не забудь обработку ошибок - когда пользователь не найден - выдавай 404

3) Добавь к каждому пользователю уникальное поле - email, если мы пытаемся создать пользователя с уже существующим email - выдавай 400 ошибку.

4) Добавь логирование этих ошибок - чтобы логи писались в файл

5) Добавь фильтры:

- site.ru/student?filter['age']['lt']=20&filter['name']=Серг
- lt - lower than - находит пользователей у которых возраст меньше 20
- gt - greater than - находит пользователей у которых возраст меньше 20
- eq - equal - находит пользователей только определенного возраста - 20
- name - поиск по имени - сюда попадут Сергей, аСергей, сергей и тд